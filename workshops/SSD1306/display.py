# The MIT License (MIT)
#
# Copyright (c) 2014 Kenneth Henderick
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from machine import I2C
import time

# Constants
DISPLAYOFF          = 0xAE
SETCONTRAST         = 0x81
DISPLAYALLON_RESUME = 0xA4
DISPLAYALLON        = 0xA5
NORMALDISPLAY       = 0xA6
INVERTDISPLAY       = 0xA7
DISPLAYON           = 0xAF
SETDISPLAYOFFSET    = 0xD3
SETCOMPINS          = 0xDA
SETVCOMDETECT       = 0xDB
SETDISPLAYCLOCKDIV  = 0xD5
SETPRECHARGE        = 0xD9
SETMULTIPLEX        = 0xA8
SETLOWCOLUMN        = 0x00
SETHIGHCOLUMN       = 0x10
SETSTARTLINE        = 0x40
MEMORYMODE          = 0x20
COLUMNADDR          = 0x21
PAGEADDR            = 0x22
COMSCANINC          = 0xC0
COMSCANDEC          = 0xC8
SEGREMAP            = 0xA0
CHARGEPUMP          = 0x8D
EXTERNALVCC         = 0x10
SWITCHCAPVCC        = 0x20
SETPAGEADDR         = 0xB0
SETCOLADDR_LOW      = 0x00
SETCOLADDR_HIGH     = 0x10
ACTIVATE_SCROLL                      = 0x2F
DEACTIVATE_SCROLL                    = 0x2E
SET_VERTICAL_SCROLL_AREA             = 0xA3
RIGHT_HORIZONTAL_SCROLL              = 0x26
LEFT_HORIZONTAL_SCROLL               = 0x27
VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL = 0x29
VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  = 0x2A

# I2C devices are accessed through a Device ID. This is a 7-bit
# value but is sometimes expressed left-shifted by 1 as an 8-bit value.
# A pin on SSD1306 allows it to respond to ID 0x3C or 0x3D. The board
# I bought from ebay used a 0-ohm resistor to select between "0x78"
# (0x3c << 1) or "0x7a" (0x3d << 1). The default was set to "0x78"
DEVID = 0x3c

# I2C communication here is either <DEVID> <CTL_CMD> <command byte>
# or <DEVID> <CTL_DAT> <display buffer bytes> <> <> <> <>...
# These two values encode the Co (Continuation) bit as b7 and the
# D/C# (Data/Command Selection) bit as b6.
CTL_CMD = 0x80
CTL_DAT = 0x40

class SSD1306(object):

  def __init__(self, height=32, external_vcc=True, i2c_devid=DEVID):
    self.external_vcc = external_vcc
    self.height       = 32 if height == 32 else 64
    self.pages        = int(self.height / 8)
    self.columns      = 128

    # Infer bus number from pin
    self.i2c = I2C(0)
    self.i2c.init(I2C.MASTER, baudrate=400000) # 400kHz
    self.devid = i2c_devid
    # used to reserve an extra byte in the image buffer AND as a way to
    # infer the interface type
    self.offset = 1
    # I2C command buffertime.sleeptime
    self.cbuffer = bytearray(2)
    self.cbuffer[0] = CTL_CMD

    self.font = None

  def clear(self):
    self.buffer = bytearray(self.offset + self.pages * self.columns)
    if self.offset == 1:
      self.buffer[0] = CTL_DAT

  def write_command(self, command_byte):
    if self.offset == 1:
      self.cbuffer[1] = command_byte
      self.i2c.writeto(self.devid, self.cbuffer)
    else:
      self.dc.low()
      self.spi.send(command_byte)

  def invert_display(self, invert):
    self.write_command(INVERTDISPLAY if invert else NORMALDISPLAY)

  def display(self):
    self.write_command(COLUMNADDR)
    self.write_command(0)
    self.write_command(self.columns - 1)
    self.write_command(PAGEADDR)
    self.write_command(0)
    self.write_command(self.pages - 1)
    if self.offset == 1:
      self.i2c.writeto(self.devid, self.buffer)
    else:
      self.dc.high()
      self.spi.send(self.buffer)

  def set_pixel(self, x, y, state):
    index = (127-x) + (int(y / 8) * self.columns)
    if state:
      self.buffer[self.offset + index] |= (1 << (y & 7))
    else:
      self.buffer[self.offset + index] &= ~(1 << (y & 7))

  def write_string(self, x, y, text):
    col_num = x
    for char in text:
      fontchar = self.font[char]
      for col in fontchar:
        for i in range(0,8):
          self.set_pixel(col_num,y+7-i,((0x80 >> i) & col) > 0)
        col_num+=1

  def init_display(self):
    chargepump = 0x10 if self.external_vcc else 0x14
    precharge  = 0x22 if self.external_vcc else 0xf1
    multiplex  = 0x1f if self.height == 32 else 0x3f
    compins    = 0x02 if self.height == 32 else 0x12
    contrast   = 0xff # 0x8f if self.height == 32 else (0x9f if self.external_vcc else 0x9f)
    data = [DISPLAYOFF,
            SETDISPLAYCLOCKDIV, 0x80,
            SETMULTIPLEX, multiplex,
            SETDISPLAYOFFSET, 0x00,
            SETSTARTLINE | 0x00,
            CHARGEPUMP, chargepump,
            MEMORYMODE, 0x00,
            SEGREMAP | 0x10,
            COMSCANDEC,
            SETCOMPINS, compins,
            SETCONTRAST, contrast,
            SETPRECHARGE, precharge,
            SETVCOMDETECT, 0x40,
            DISPLAYALLON_RESUME,
            NORMALDISPLAY,
            DISPLAYON]
    for item in data:
      self.write_command(item)
    self.clear()
    self.display()

  def init_font(self):
    if self.font == None:
      # 8x8 font
      self.font = {
        ' ':[0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00],
        '!':[0x00,0x00,0x00,0x4f,0x4f,0x00,0x00,0x00],
        '"':[0x00,0x07,0x07,0x00,0x00,0x07,0x07,0x00],
        '#':[0x14,0x7f,0x7f,0x14,0x14,0x7f,0x7f,0x14],
        '$':[0x00,0x24,0x2e,0x6b,0x6b,0x3a,0x12,0x00],
        '%':[0x00,0x63,0x33,0x18,0x0c,0x66,0x63,0x00],
        '&':[0x00,0x32,0x7f,0x4d,0x4d,0x77,0x72,0x50],
        '\'':[0x00,0x00,0x00,0x04,0x06,0x03,0x01,0x00],
        '(':[0x00,0x00,0x1c,0x3e,0x63,0x41,0x00,0x00],
        ')':[0x00,0x00,0x41,0x63,0x3e,0x1c,0x00,0x00],
        '*':[0x08,0x2a,0x3e,0x1c,0x1c,0x3e,0x2a,0x08],
        '+':[0x00,0x08,0x08,0x3e,0x3e,0x08,0x08,0x00],
        ',':[0x00,0x00,0x80,0xe0,0x60,0x00,0x00,0x00],
        '-':[0x00,0x08,0x08,0x08,0x08,0x08,0x08,0x00],
        '.':[0x00,0x00,0x00,0x60,0x60,0x00,0x00,0x00],
        '/':[0x00,0x40,0x60,0x30,0x18,0x0c,0x06,0x02],
        '0':[0x00,0x3e,0x7f,0x49,0x45,0x7f,0x3e,0x00],
        '1':[0x00,0x40,0x44,0x7f,0x7f,0x40,0x40,0x00],
        '2':[0x00,0x62,0x73,0x51,0x49,0x4f,0x46,0x00],
        '3':[0x00,0x22,0x63,0x49,0x49,0x7f,0x36,0x00],
        '4':[0x00,0x18,0x18,0x14,0x16,0x7f,0x7f,0x10],
        '5':[0x00,0x27,0x67,0x45,0x45,0x7d,0x39,0x00],
        '6':[0x00,0x3e,0x7f,0x49,0x49,0x7b,0x32,0x00],
        '7':[0x00,0x03,0x03,0x79,0x7d,0x07,0x03,0x00],
        '8':[0x00,0x36,0x7f,0x49,0x49,0x7f,0x36,0x00],
        '9':[0x00,0x26,0x6f,0x49,0x49,0x7f,0x3e,0x00],
        ':':[0x00,0x00,0x00,0x24,0x24,0x00,0x00,0x00],
        ';':[0x00,0x00,0x80,0xe4,0x64,0x00,0x00,0x00],
        '<':[0x00,0x08,0x1c,0x36,0x63,0x41,0x41,0x00],
        '=':[0x00,0x14,0x14,0x14,0x14,0x14,0x14,0x00],
        '>':[0x00,0x41,0x41,0x63,0x36,0x1c,0x08,0x00],
        '?':[0x00,0x02,0x03,0x51,0x59,0x0f,0x06,0x00],
        '@':[0x00,0x3e,0x7f,0x41,0x4d,0x4f,0x2e,0x00],
        'A':[0x00,0x7c,0x7e,0x0b,0x0b,0x7e,0x7c,0x00],
        'B':[0x00,0x7f,0x7f,0x49,0x49,0x7f,0x36,0x00],
        'C':[0x00,0x3e,0x7f,0x41,0x41,0x63,0x22,0x00],
        'D':[0x00,0x7f,0x7f,0x41,0x63,0x3e,0x1c,0x00],
        'E':[0x00,0x7f,0x7f,0x49,0x49,0x41,0x41,0x00],
        'F':[0x00,0x7f,0x7f,0x09,0x09,0x01,0x01,0x00],
        'G':[0x00,0x3e,0x7f,0x41,0x49,0x7b,0x3a,0x00],
        'H':[0x00,0x7f,0x7f,0x08,0x08,0x7f,0x7f,0x00],
        'I':[0x00,0x00,0x41,0x7f,0x7f,0x41,0x00,0x00],
        'J':[0x00,0x20,0x60,0x41,0x7f,0x3f,0x01,0x00],
        'K':[0x00,0x7f,0x7f,0x1c,0x36,0x63,0x41,0x00],
        'L':[0x00,0x7f,0x7f,0x40,0x40,0x40,0x40,0x00],
        'M':[0x00,0x7f,0x7f,0x06,0x0c,0x06,0x7f,0x7f],
        'N':[0x00,0x7f,0x7f,0x0e,0x1c,0x7f,0x7f,0x00],
        'O':[0x00,0x3e,0x7f,0x41,0x41,0x7f,0x3e,0x00],
        'P':[0x00,0x7f,0x7f,0x09,0x09,0x0f,0x06,0x00],
        'Q':[0x00,0x1e,0x3f,0x21,0x61,0x7f,0x5e,0x00],
        'R':[0x00,0x7f,0x7f,0x19,0x39,0x6f,0x46,0x00],
        'S':[0x00,0x26,0x6f,0x49,0x49,0x7b,0x32,0x00],
        'T':[0x00,0x01,0x01,0x7f,0x7f,0x01,0x01,0x00],
        'U':[0x00,0x3f,0x7f,0x40,0x40,0x7f,0x3f,0x00],
        'V':[0x00,0x1f,0x3f,0x60,0x60,0x3f,0x1f,0x00],
        'W':[0x00,0x7f,0x7f,0x30,0x18,0x30,0x7f,0x7f],
        'X':[0x00,0x63,0x77,0x1c,0x1c,0x77,0x63,0x00],
        'Y':[0x00,0x07,0x0f,0x78,0x78,0x0f,0x07,0x00],
        'Z':[0x00,0x61,0x71,0x59,0x4d,0x47,0x43,0x00],
        '[':[0x00,0x00,0x7f,0x7f,0x41,0x41,0x00,0x00],
        '\\':[0x00,0x02,0x06,0x0c,0x18,0x30,0x60,0x40],
        ']':[0x00,0x00,0x41,0x41,0x7f,0x7f,0x00,0x00],
        '^':[0x00,0x08,0x0c,0x06,0x06,0x0c,0x08,0x00],
        '_':[0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0],
        '`':[0x00,0x00,0x01,0x03,0x06,0x04,0x00,0x00],
        'a':[0x00,0x20,0x74,0x54,0x54,0x7c,0x78,0x00],
        'b':[0x00,0x7f,0x7f,0x44,0x44,0x7c,0x38,0x00],
        'c':[0x00,0x38,0x7c,0x44,0x44,0x6c,0x28,0x00],
        'd': [0x00,0x38,0x7c,0x44,0x44,0x7f,0x7f,0x00],
        'e': [0x00,0x38,0x7c,0x54,0x54,0x5c,0x58,0x00],
        'f': [0x00,0x08,0x7e,0x7f,0x09,0x03,0x02,0x00],
        'g': [0x00,0x98,0xbc,0xa4,0xa4,0xfc,0x7c,0x00],
        'h': [0x00,0x7f,0x7f,0x04,0x04,0x7c,0x78,0x00],
        'i': [0x00,0x00,0x00,0x7d,0x7d,0x00,0x00,0x00],
        'j': [0x00,0x40,0xc0,0x80,0x80,0xfd,0x7d,0x00],
        'k': [0x00,0x7f,0x7f,0x30,0x38,0x6c,0x44,0x00],
        'l': [0x00,0x00,0x41,0x7f,0x7f,0x40,0x00,0x00],
        'm': [0x00,0x7c,0x7c,0x18,0x30,0x18,0x7c,0x7c],
        'n': [0x00,0x7c,0x7c,0x04,0x04,0x7c,0x78,0x00],
        'o': [0x00,0x38,0x7c,0x44,0x44,0x7c,0x38,0x00],
        'p': [0x00,0xfc,0xfc,0x24,0x24,0x3c,0x18,0x00],
        'q': [0x00,0x18,0x3c,0x24,0x24,0xfc,0xfc,0x00],
        'r': [0x00,0x7c,0x7c,0x04,0x04,0x0c,0x08,0x00],
        's': [0x00,0x48,0x5c,0x54,0x54,0x74,0x20,0x00],
        't': [0x04,0x04,0x3f,0x7f,0x44,0x64,0x20,0x00],
        'u': [0x00,0x3c,0x7c,0x40,0x40,0x7c,0x3c,0x00],
        'v': [0x00,0x1c,0x3c,0x60,0x60,0x3c,0x1c,0x00],
        'w': [0x00,0x1c,0x7c,0x30,0x18,0x30,0x7c,0x1c],
        'x': [0x00,0x44,0x6c,0x38,0x38,0x6c,0x44,0x00],
        'y': [0x00,0x9c,0xbc,0xa0,0xa0,0xfc,0x7c,0x00],
        'z': [0x00,0x44,0x64,0x74,0x5c,0x4c,0x44,0x00],
        '{': [0x00,0x08,0x08,0x3e,0x77,0x41,0x41,0x00],
        '|': [0x00,0x00,0x00,0xff,0xff,0x00,0x00,0x00],
        '}': [0x00,0x41,0x41,0x77,0x3e,0x08,0x08,0x00],
        '~': [0x00,0x02,0x03,0x01,0x03,0x02,0x03,0x01],
        '¤':[0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55] 
        }

  def poweron(self):
    if self.offset == 1:
      time.sleep_ms(10)
    else:
      self.res.high()
      time.sleep_ms(1)
      self.res.low()
      time.sleep_ms(10)
      self.res.high()
      time.sleep_ms(10)

  def poweroff(self):
    self.write_command(DISPLAYOFF)

  def contrast(self, contrast):
    self.write_command(SETCONTRAST)
    self.write_command(contrast)

  def set_start_end_cols(self, start_col=0, end_col=None):
    if end_col is None:
      end_col = self.columns - 1
    if start_col < 0 or start_col > self.columns - 1:
      raise ValueError('Start column must be between 0 and %d.' % (self.columns - 1,))
    if end_col < start_col or end_col > self.columns -1:
      raise ValueError('End column must be between the start column (%d) and %d.' % (start_col, self.columns - 1))

    self.write_command(COLUMNADDR)
    self.write_command(start_col)  # Start column
    self.write_command(end_col)  # End column

  def set_start_end_pages(self, start_page=0, end_page=None):
    if end_page is None:
      end_page = self.pages - 1
    if start_page < 0 or start_page > self.pages - 1:
      raise ValueError('Start page must be between 0 and %d.' % (self.pages - 1,))
    if end_page < start_page or end_page > self.pages - 1:
      raise ValueError('End page must be between the start page (%d) and %d.' % (start_page, self.pages - 1))

    self.write_command(PAGEADDR)
    self.write_command(start_page)  # Page start address. (0 = reset)
    self.write_command(end_page)  # Page end address.
